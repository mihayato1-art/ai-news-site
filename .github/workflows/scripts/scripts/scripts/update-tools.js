// üõ†Ô∏è AI„ÉÑ„Éº„É´ÊÉÖÂ†±Êõ¥Êñ∞„Çπ„ÇØ„É™„Éó„ÉàÔºàGitHub ActionsÁî®Ôºâ
const fs = require('fs');
const path = require('path');

class AIToolsUpdater {
  constructor() {
    this.dataDir = path.join(process.cwd(), 'data');
    this.toolsFile = path.join(this.dataDir, 'ai-tools.json');
    
    // ‰∏ªË¶ÅAI„ÉÑ„Éº„É´„ÅÆÊÉÖÂ†±
    this.aiTools = [
      {
        id: 'chatgpt',
        name: 'ChatGPT',
        company: 'OpenAI',
        category: '„ÉÜ„Ç≠„Çπ„ÉàÁîüÊàê',
        description: 'Ëá™ÁÑ∂„Å™‰ºöË©±„Åå„Åß„Åç„ÇãÈ´òÊÄßËÉΩ„Å™AI„Ç¢„Ç∑„Çπ„Çø„É≥„Éà„ÄÇ„Éó„É≠„Ç∞„É©„Éü„É≥„Ç∞„ÄÅÊñáÁ´†‰ΩúÊàê„ÄÅÂ≠¶Áøí„Çµ„Éù„Éº„Éà„Å™„Å©ÂπÖÂ∫É„ÅèÊ¥ªÁî®ÂèØËÉΩ„ÄÇ',
        pricing: {
          free: 'Êúà20Âõû„Åæ„ÅßÁÑ°Êñô',
          paid: '$20/Êúà (PlusÁâà)'
        },
        features: ['Ëá™ÁÑ∂Ë®ÄË™ûÂá¶ÁêÜ', '„Ç≥„Éº„ÉâÁîüÊàê', 'ÊñáÁ´†‰ΩúÊàê', 'ÁøªË®≥', 'Ë¶ÅÁ¥Ñ'],
        pros: ['‰Ωø„ÅÑ„ÇÑ„Åô„ÅÑ', 'È´òÂìÅË≥™„Å™ÂõûÁ≠î', 'Ë±äÂØå„Å™Ê©üËÉΩ'],
        cons: ['ÁÑ°ÊñôÁâà„ÅØÂà∂Èôê„ÅÇ„Çä', 'ÊúÄÊñ∞ÊÉÖÂ†±„Å´Âº±„ÅÑ'],
        difficulty: 'ÂàùÂøÉËÄÖ',
        rating: 9.2,
        url: 'https://chat.openai.com',
        lastUpdated: new Date().toISOString()
      },
      {
        id: 'claude',
        name: 'Claude',
        company: 'Anthropic',
        category: '„ÉÜ„Ç≠„Çπ„ÉàÁîüÊàê',
        description: 'ÂÆâÂÖ®ÊÄß„Å®ÊúâÁî®ÊÄß„ÇíÈáçË¶ñ„Åó„ÅüAI„Ç¢„Ç∑„Çπ„Çø„É≥„Éà„ÄÇÈï∑Êñá„ÅÆÂá¶ÁêÜ„ÅåÂæóÊÑè„Åß„ÄÅË©≥Á¥∞„Å™ÂàÜÊûê„ÇÑË¶ÅÁ¥Ñ„Å´ÂÑ™„Çå„Å¶„ÅÑ„Åæ„Åô„ÄÇ',
        pricing: {
          free: 'ÊúàÊï∞Âõû„Åæ„ÅßÁÑ°Êñô',
          paid: '$20/Êúà (ProÁâà)'
        },
        features: ['Èï∑ÊñáÂá¶ÁêÜ', 'Ë©≥Á¥∞ÂàÜÊûê', 'ÂÆâÂÖ®„Å™ÂõûÁ≠î', '„Éï„Ç°„Ç§„É´Ëß£Êûê'],
        pros: ['ÂÆâÂÖ®ÊÄß„ÅåÈ´ò„ÅÑ', 'Èï∑ÊñáÂá¶ÁêÜ„ÅåÂæóÊÑè', 'Ë©≥Á¥∞„Å™ÂàÜÊûê'],
        cons: ['ÁÑ°ÊñôÁâà„ÅÆÂà∂Èôê„ÅåÂé≥„Åó„ÅÑ', 'Êó•Êú¨Ë™û„ÅÆÁ≤æÂ∫¶'],
        difficulty: 'ÂàùÂøÉËÄÖ',
        rating: 8.8,
        url: 'https://claude.ai',
        lastUpdated: new Date().toISOString()
      },
      {
        id: 'gemini',
        name: 'Google Gemini',
        company: 'Google',
        category: '„ÉÜ„Ç≠„Çπ„ÉàÁîüÊàê',
        description: 'Google„ÅÆÊúÄÊñ∞AI„É¢„Éá„É´„ÄÇÊúÄÊñ∞ÊÉÖÂ†±„Å∏„ÅÆ„Ç¢„ÇØ„Çª„Çπ„ÅåÂèØËÉΩ„Åß„ÄÅÁîªÂÉèË™çË≠òÊ©üËÉΩ„ÇÇÊê≠Ëºâ„ÄÇ',
        pricing: {
          free: 'Âü∫Êú¨Ê©üËÉΩÁÑ°Êñô',
          paid: '$20/Êúà (AdvancedÁâà)'
        },
        features: ['ÊúÄÊñ∞ÊÉÖÂ†±„Ç¢„ÇØ„Çª„Çπ', 'ÁîªÂÉèË™çË≠ò', 'GoogleÈÄ£Êê∫', '„É™„Ç¢„É´„Çø„Ç§„É†Ê§úÁ¥¢'],
        pros: ['ÊúÄÊñ∞ÊÉÖÂ†±„Å´Âº∑„ÅÑ', 'ÁîªÂÉèÂá¶ÁêÜÂèØËÉΩ', 'GoogleÈÄ£Êê∫'],
        cons: ['Á≤æÂ∫¶„Å´„Å∞„Çâ„Å§„Åç', 'Ë§áÈõë„Å™Ë≥™Âïè„Å´Âº±„ÅÑ'],
        difficulty: 'ÂàùÂøÉËÄÖ',
        rating: 8.5,
        url: 'https://gemini.google.com',
        lastUpdated: new Date().toISOString()
      },
      {
        id: 'midjourney',
        name: 'Midjourney',
        company: 'Midjourney',
        category: 'ÁîªÂÉèÁîüÊàê',
        description: 'È´òÂìÅË≥™„Å™AIÁîªÂÉèÁîüÊàê„ÉÑ„Éº„É´„ÄÇ„Ç¢„Éº„ÉàÁöÑ„ÅßÁæé„Åó„ÅÑÁîªÂÉè„ÅÆÁîüÊàê„ÅåÂæóÊÑè„ÄÇDiscordÁµåÁî±„ÅßÂà©Áî®„ÄÇ',
        pricing: {
          free: 'ÁÑ°Êñô„Éà„É©„Ç§„Ç¢„É´„ÅÇ„Çä',
          paid: '$10/ÊúàÔΩû (BasicÁâà)'
        },
        features: ['È´òÂìÅË≥™ÁîªÂÉèÁîüÊàê', '„Ç¢„Éº„ÉàÈ¢®ÁîªÂÉè', '„Çπ„Çø„Ç§„É´ÊåáÂÆö', '„Éê„É™„Ç®„Éº„Ç∑„Éß„É≥ÁîüÊàê'],
        pros: ['ÁîªË≥™„ÅåÈùûÂ∏∏„Å´È´ò„ÅÑ', '„Ç¢„Éº„ÉàÊÄß„Å´ÂÑ™„Çå„Çã', 'Ë±äÂØå„Å™„Çπ„Çø„Ç§„É´'],
        cons: ['DiscordÂøÖÈ†à', 'Êìç‰Ωú„ÅåÁã¨Áâπ', 'Êó•Êú¨Ë™ûÂØæÂøúÈôêÂÆöÁöÑ'],
        difficulty: '‰∏≠Á¥öËÄÖ',
        rating: 9.0,
        url: 'https://www.midjourney.com',
        lastUpdated: new Date().toISOString()
      },
      {
        id: 'dalle3',
        name: 'DALL-E 3',
        company: 'OpenAI',
        category: 'ÁîªÂÉèÁîüÊàê',
        description: 'OpenAI„ÅÆÁîªÂÉèÁîüÊàêAI„ÄÇChatGPT Plus„Åã„ÇâÂà©Áî®ÂèØËÉΩ„Åß„ÄÅËá™ÁÑ∂Ë®ÄË™û„Åß„ÅÆÊåáÁ§∫„ÅåÂæóÊÑè„ÄÇ',
        pricing: {
          free: '„Å™„Åó',
          paid: '$20/Êúà (ChatGPT PlusÁµåÁî±)'
        },
        features: ['Ëá™ÁÑ∂Ë®ÄË™ûÁêÜËß£', 'ChatGPTÈÄ£Êê∫', 'È´òÁ≤æÂ∫¶ÁîüÊàê', '„ÉÜ„Ç≠„Çπ„ÉàÂüã„ÇÅËæº„Åø'],
        pros: ['Ëá™ÁÑ∂„Å™ÊåáÁ§∫„ÅßÁîüÊàê', 'ChatGPTÈÄ£Êê∫', 'È´ò„ÅÑÁêÜËß£Âäõ'],
        cons: ['ChatGPT PlusÂøÖÈ†à', 'ÁîüÊàêÊûöÊï∞Âà∂Èôê', '‰æ°Ê†º„ÅåÈ´ò„ÅÑ'],
        difficulty: 'ÂàùÂøÉËÄÖ',
        rating: 8.7,
        url: 'https://openai.com/dall-e-3',
        lastUpdated: new Date().toISOString()
      },
      {
        id: 'runway',
        name: 'Runway ML',
        company: 'Runway',
        category: 'ÂãïÁîªÁîüÊàê',
        description: 'AIÂãïÁîªÁîüÊàê„ÉªÁ∑®ÈõÜ„ÉÑ„Éº„É´„ÄÇ„ÉÜ„Ç≠„Çπ„Éà„Åã„ÇâÂãïÁîªÁîüÊàê„ÇÑÊó¢Â≠òÂãïÁîª„ÅÆÁ∑®ÈõÜ„ÅåÂèØËÉΩ„ÄÇ',
        pricing: {
          free: 'Âü∫Êú¨Ê©üËÉΩÁÑ°Êñô',
          paid: '$12/ÊúàÔΩû (StandardÁâà)'
        },
        features: ['ÂãïÁîªÁîüÊàê', 'ÂãïÁîªÁ∑®ÈõÜ', '„ÉÜ„Ç≠„Çπ„ÉàtoÂãïÁîª', 'ÁîªÂÉètoÂãïÁîª'],
        pros: ['ÂãïÁîªÁîüÊàê„ÅÆ„Éë„Ç§„Ç™„Éã„Ç¢', 'Â§öÊ©üËÉΩ', '„ÇØ„É™„Ç®„Ç§„ÉÜ„Ç£„Éñ„ÉÑ„Éº„É´ÂÖÖÂÆü'],
        cons: ['Êìç‰Ωú„ÅåË§áÈõë', 'ÁîüÊàêÊôÇÈñì„ÅåÈï∑„ÅÑ', 'È´ò„ÅÑÊñôÈáë'],
        difficulty: '‰∏äÁ¥öËÄÖ',
        rating: 8.3,
        url: 'https://runwayml.com',
        lastUpdated: new Date().toISOString()
      }
    ];
  }

  async updateTools() {
    console.log('üõ†Ô∏è AI„ÉÑ„Éº„É´ÊÉÖÂ†±„ÇíÊõ¥Êñ∞‰∏≠...');
    
    try {
      // „ÉÑ„Éº„É´ÊÉÖÂ†±„ÇíÊúÄÊñ∞Âåñ
      const updatedTools = this.aiTools.map(tool => ({
        ...tool,
        lastUpdated: new Date().toISOString()
      }));

      // „Éá„Éº„Çø‰øùÂ≠ò
      await this.saveToolsData(updatedTools);
      
      // ÊØîËºÉË°®ÁîüÊàê
      await this.generateComparisonTable(updatedTools);
      
      console.log(`‚úÖ ${updatedTools.length}ÂÄã„ÅÆ„ÉÑ„Éº„É´ÊÉÖÂ†±„ÇíÊõ¥Êñ∞„Åó„Åæ„Åó„Åü`);
      
    } catch (error) {
      console.error('‚ùå „ÉÑ„Éº„É´ÊÉÖÂ†±Êõ¥Êñ∞„Ç®„É©„Éº:', error);
      throw error;
    }
  }

  async saveToolsData(tools) {
    const toolsData = {
      lastUpdated: new Date().toISOString(),
      totalCount: tools.length,
      categories: this.getCategoryCounts(tools),
      tools: tools
    };

    // „Éá„Éº„Çø„Éá„Ç£„É¨„ÇØ„Éà„É™Á¢∫‰øù
    if (!fs.existsSync(this.dataDir)) {
      fs.mkdirSync(this.dataDir, { recursive: true });
    }

    // „É°„Ç§„É≥„Éá„Éº„Çø„Éï„Ç°„Ç§„É´
    fs.writeFileSync(this.toolsFile, JSON.stringify(toolsData, null, 2));
    
    console.log('üíæ „ÉÑ„Éº„É´„Éá„Éº„Çø‰øùÂ≠òÂÆå‰∫Ü');
  }

  getCategoryCounts(tools) {
    const counts = {};
    tools.forEach(tool => {
      counts[tool.category] = (counts[tool.category] || 0) + 1;
    });
    return counts;
  }

  async generateComparisonTable(tools) {
    const distDir = path.join(process.cwd(), 'dist');
    if (!fs.existsSync(distDir)) {
      fs.mkdirSync(distDir, { recursive: true });
    }

    const html = `<!DOCTYPE html>
<html lang="ja">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>AI„ÉÑ„Éº„É´ÊØîËºÉË°® - AIÂàùÂøÉËÄÖ„Éä„Éì</title>
    <style>
        body { font-family: -apple-system, BlinkMacSystemFont, sans-serif; margin: 20px; background: #f8fafc; }
        .container { max-width: 1200px; margin: 0 auto; }
        .header { text-align: center; margin-bottom: 30px; }
        h1 { color: #1e293b; margin-bottom: 10px; }
        .last-updated { color: #64748b; font-size: 0.9rem; }
        
        .tools-grid { display: grid; gap: 20px; margin-bottom: 40px; }
        .tool-card { 
            background: white; padding: 25px; border-radius: 12px; 
            box-shadow: 0 2px 10px rgba(0,0,0,0.1); transition: transform 0.2s ease;
        }
        .tool-card:hover { transform: translateY(-2px); }
        
        .tool-header { display: flex; justify-content: space-between; align-items: start; margin-bottom: 15px; }
        .tool-name { font-size: 1.4rem; font-weight: bold; color: #1e293b; }
        .tool-rating { 
            background: #667eea; color: white; padding: 5px 12px; 
            border-radius: 20px; font-size: 0.9rem; font-weight: 600;
        }
        
        .tool-meta { display: flex; gap: 15px; margin-bottom: 15px; font-size: 0.9rem; color: #64748b; }
        .category-badge { background: #e2e8f0; color: #475569; padding: 3px 10px; border-radius: 15px; }
        .difficulty-badge { background: #fef3c7; color: #d97706; padding: 3px 10px; border-radius: 15px; }
        
        .tool-description { margin-bottom: 15px; line-height: 1.6; color: #475569; }
        
        .pricing { margin-bottom: 15px; }
        .pricing-item { display: flex; justify-content: space-between; margin-bottom: 5px; font-size: 0.9rem; }
        
        .features { margin-bottom: 15px; }
        .features h4 { margin-bottom: 8px; color: #1e293b; }
        .feature-tags { display: flex; flex-wrap: wrap; gap: 8px; }
        .feature-tag { background: #ecfdf5; color: #059669; padding: 4px 10px; border-radius: 12px; font-size: 0.8rem; }
        
        .pros-cons { display: grid; grid-template-columns: 1fr 1fr; gap: 15px; margin-bottom: 15px; }
        .pros h4 { color: #059669; }
        .cons h4 { color: #dc2626; }
        .pros-cons ul { margin: 8px 0; padding-left: 20px; }
        .pros-cons li { margin-bottom: 3px; font-size: 0.9rem; }
        
        .tool-link { text-align: center; }
        .tool-link a { 
            display: inline-block; background: #667eea; color: white; 
            padding: 10px 20px; border-radius: 8px; text-decoration: none; 
            font-weight: 600; transition: background 0.2s ease;
        }
        .tool-link a:hover { background: #5a67d8; }
        
        @media (max-width: 768px) {
            .pros-cons { grid-template-columns: 1fr; }
            .tool-header { flex-direction: column; gap: 10px; }
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>üõ†Ô∏è AI„ÉÑ„Éº„É´ÊØîËºÉË°®</h1>
            <p class="last-updated">ÊúÄÁµÇÊõ¥Êñ∞: ${new Date().toLocaleString('ja-JP')}</p>
        </div>

        <div class="tools-grid">
            ${tools.map(tool => this.generateToolCardHTML(tool)).join('')}
        </div>
    </div>
</body>
</html>`;

    const comparisonFile = path.join(distDir, 'tools-comparison.html');
    fs.writeFileSync(comparisonFile, html);
    console.log('‚úÖ „ÉÑ„Éº„É´ÊØîËºÉË°®ÁîüÊàêÂÆå‰∫Ü');
  }

  generateToolCardHTML(tool) {
    return `
    <div class="tool-card">
        <div class="tool-header">
            <h2 class="tool-name">${tool.name}</h2>
            <div class="tool-rating">${tool.rating}/10</div>
        </div>
        
        <div class="tool-meta">
            <span class="category-badge">${tool.category}</span>
            <span class="difficulty-badge">${tool.difficulty}</span>
            <span>${tool.company}</span>
        </div>
        
        <p class="tool-description">${tool.description}</p>
        
        <div class="pricing">
            <div class="pricing-item">
                <span>ÁÑ°ÊñôÁâà:</span>
                <span>${tool.pricing.free}</span>
            </div>
            <div class="pricing-item">
                <span>ÊúâÊñôÁâà:</span>
                <span>${tool.pricing.paid}</span>
            </div>
        </div>
        
        <div class="features">
            <h4>‰∏ª„Å™Ê©üËÉΩ</h4>
            <div class="feature-tags">
                ${tool.features.map(feature => `<span class="feature-tag">${feature}</span>`).join('')}
            </div>
        </div>
        
        <div class="pros-cons">
            <div class="pros">
                <h4>üëç „É°„É™„ÉÉ„Éà</h4>
                <ul>
                    ${tool.pros.map(pro => `<li>${pro}</li>`).join('')}
                </ul>
            </div>
            <div class="cons">
                <h4>üëé „Éá„É°„É™„ÉÉ„Éà</h4>
                <ul>
                    ${tool.cons.map(con => `<li>${con}</li>`).join('')}
                </ul>
            </div>
        </div>
        
        <div class="tool-link">
            <a href="${tool.url}" target="_blank" rel="noopener">ÂÖ¨Âºè„Çµ„Ç§„Éà„ÇíË¶ã„Çã</a>
        </div>
    </div>`;
  }
}

// GitHub ActionsÂÆüË°å
async function main() {
  try {
    const updater = new AIToolsUpdater();
    await updater.updateTools();
    
    console.log('üéâ AI„ÉÑ„Éº„É´ÊÉÖÂ†±Êõ¥Êñ∞ÂÆå‰∫Ü');
    process.exit(0);
    
  } catch (error) {
    console.error('‚ùå „ÉÑ„Éº„É´Êõ¥Êñ∞„Ç®„É©„Éº:', error);
    process.exit(1);
  }
}

if (require.main === module) {
  main();
}

module.exports = AIToolsUpdater;
